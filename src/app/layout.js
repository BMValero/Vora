"use client";

import React, { useState, useEffect } from "react";
// import "./globals.css";
// import { Inter } from "next/font/google";
import Nav from "../layouts/nav";
import Footer from "../layouts/Footer";
import ScrollToTop from "@/pages/ScrollToTop";
import "../css/style.css";
import "./layout.css";
import "../vendor/bootstrap-select/dist/css/bootstrap-select.min.css";
import { usePathname } from "next/navigation";

// const inter = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// let path = window.location.pathname;
// path = path.split("/");
// path = path[path.length - 1];
// let pagePath = path.split("-").includes("page");

let path = "";

export default function RootLayout({ children, width }) {
  const pathname = usePathname();
  const [pagePath, setPagepath] = useState();
  const [windowWidth, setWindowWidth] = useState(0);

  // const [path, setPath] = useState(window.location.pathname);

  useEffect(() => {
    path = pathname;
    path = path.split("/");
    path = path[path.length - 1];
    const pagePath1 = path.split("-").includes("page");
    setPagepath(pagePath1);
  }, [pathname]);

  // path = path.split("/");
  // path = path[path.length - 1];
  // let pagePath = path.split("-").includes("page");
  // const pathSegments = path.split("/");
  // const pagePath = pathSegments[pathSegments.length - 1].includes("page");

  const [activeEvent, setActiveEvent] = useState(!path);
  useEffect(() => {
    const handleResize = () => {
      const body = document.querySelector("body");
      if (window.innerWidth >= 1300) {
        body.setAttribute("data-sidebar-style", "full");
      } else if (window.innerWidth <= 1299 && window.innerWidth >= 767) {
        body.setAttribute("data-sidebar-style", "mini");
      } else {
        body.setAttribute("data-sidebar-style", "overlay");
      }
      setWindowWidth(window.innerWidth);
    };

    window.addEventListener("resize", handleResize);

    // Cleanup the event listener on component unmount
    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, []);
  return (
    <html lang="en">
      <head>
        <title>Vora - React Admin Dashboard</title>
      </head>
      <body
        data-typography="poppins"
        data-theme-version="light"
        data-layout="vertical"
        data-nav-headerbg="color_1"
        data-headerbg="color_1"
        data-sidebar-style="full"
        data-sibebarbg="color_1"
        data-sidebar-position="fixed"
        data-header-position="fixed"
        data-container="wide"
        direction="ltr"
        data-primary="color_1"
        // className={inter.className}
      >
        <div
          id={`${!pagePath ? "main-wrapper" : ""}`}
          className={`${!pagePath ? "show" : "mh100vh"}`}
        >
          {!pagePath && (
            <Nav
              onClick={() => setActiveEvent(!activeEvent)}
              activeEvent={activeEvent}
              onClick2={() => setActiveEvent(false)}
              onClick3={() => setActiveEvent(true)}
            />
          )}

          <div
            className={` ${!path && activeEvent ? "rightside-event" : ""} ${
              !pagePath ? "content-body" : ""
            }`}
          >
            <div className={`${!pagePath ? "container-fluid" : ""}`}>
              {children}
            </div>
          </div>
          {!pagePath && <Footer />}
        </div>
        <ScrollToTop />
      </body>
    </html>
  );
}
